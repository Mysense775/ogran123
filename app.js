class DiamondCutterApp {
    constructor() {
        this.init();
    }

    init() {
        this.setupTelegramWebApp();
        this.setupNavigation();
        this.loadTestData();
        this.setupEventListeners();
        this.renderContent();
    }

    setupTelegramWebApp() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        if (window.Telegram && window.Telegram.WebApp) {
            Telegram.WebApp.ready();
            Telegram.WebApp.expand();
            Telegram.WebApp.enableClosingConfirmation();
        }
    }

    setupNavigation() {
        const tabButtons = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');

        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const tabId = button.dataset.tab;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                tabButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                tabContents.forEach(content => content.classList.remove('active'));
                document.getElementById(tabId).classList.add('active');
            });
        });
    }

    loadTestData() {
        this.data = window.testData;
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –¥–Ω–µ–≤–Ω–∏–∫–∞
        const journalForm = document.getElementById('journal-form');
        if (journalForm) {
            journalForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveJournalEntry();
            });
        }

        // –ö–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏
        const reactionButtons = document.querySelectorAll('.reaction-btn');
        reactionButtons.forEach(button => {
            button.addEventListener('click', () => {
                reactionButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
            });
        });

        // –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        const completeBtn = document.querySelector('.btn-complete');
        if (completeBtn) {
            completeBtn.addEventListener('click', () => {
                completeBtn.textContent = '‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è';
                completeBtn.style.background = '#888';
                completeBtn.disabled = true;
            });
        }
    }

    renderContent() {
        this.renderDashboard();
        this.renderChapters();
        this.renderMeditations();
        this.renderGrowthMap();
        this.renderJournalHistory();
    }

    renderDashboard() {
        const stats = document.querySelector('.stats');
        if (stats && this.data.user) {
            stats.innerHTML = `
                <div class="stat-card">
                    <h3>–î–Ω–µ–π –ø–æ–¥—Ä—è–¥</h3>
                    <span class="stat-number">${this.data.user.streak}</span>
                </div>
                <div class="stat-card">
                    <h3>–°–µ–º—è–Ω –ø–æ—Å–µ—è–Ω–æ</h3>
                    <span class="stat-number">${this.data.user.seedsPlanted}</span>
                </div>
                <div class="stat-card">
                    <h3>–£—Ä–æ–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ</h3>
                    <span class="stat-number">${this.data.user.lessonsCompleted}</span>
                </div>
            `;
        }
    }

    renderChapters() {
        const chaptersList = document.querySelector('.chapters-list');
        if (chaptersList && this.data.chapters) {
            chaptersList.innerHTML = this.data.chapters.map(chapter => `
                <div class="chapter-card">
                    <h3>${chapter.title}</h3>
                    <p>${chapter.description}</p>
                    <div class="chapter-progress">
                        <div class="progress-bar" style="width: ${chapter.progress}%"></div>
                    </div>
                    <p>–ü—Ä–æ–≥—Ä–µ—Å—Å: ${chapter.progress}%</p>
                    <div class="assignment">
                        <p>${chapter.assignment.replace(/\n/g, '<br>')}</p>
                    </div>
                    <button class="btn-start" onclick="app.startChapter(${chapter.id})">
                        ${chapter.progress === 100 ? '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å' : '–ù–∞—á–∞—Ç—å'}
                    </button>
                </div>
            `).join('');
        }
    }

    renderMeditations() {
        const meditationsList = document.querySelector('.meditations-list');
        if (meditationsList && this.data.meditations) {
            meditationsList.innerHTML = this.data.meditations.map(meditation => `
                <div class="meditation-card">
                    <h3>${meditation.title}</h3>
                    <p>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${meditation.duration}</p>
                    <div class="meditation-guide">
                        <p>${meditation.guide.replace(/\n/g, '<br>')}</p>
                    </div>
                    <button class="btn-start" onclick="app.startMeditation(${meditation.id})">
                        –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É
                    </button>
                </div>
            `).join('');
        }
    }

    renderGrowthMap() {
        const mapSectors = document.querySelector('.map-sectors');
        if (mapSectors && this.data.growthMap) {
            mapSectors.innerHTML = `
                <div class="sector">
                    <h3>üíº –ö–∞—Ä—å–µ—Ä–∞ –∏ –§–∏–Ω–∞–Ω—Å—ã</h3>
                    ${this.renderSectorContent(this.data.growthMap.career)}
                </div>
                <div class="sector">
                    <h3>‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ</h3>
                    ${this.renderSectorContent(this.data.growthMap.health)}
                </div>
                <div class="sector">
                    <h3>üë• –û—Ç–Ω–æ—à–µ–Ω–∏—è</h3>
                    ${this.renderSectorContent(this.data.growthMap.relationships)}
                </div>
                <div class="sector">
                    <h3>üå± –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è</p>
                </div>
            `;
        }
    }

    renderSectorContent(sector) {
        return `
            <div class="fragile-zones">
                <h4>–ó–æ–Ω—ã –•—Ä—É–ø–∫–æ—Å—Ç–∏:</h4>
                ${sector.fragileZones.map(zone => `
                    <div class="fragile-zone">${zone}</div>
                `).join('')}
            </div>
            <div class="diamonds">
                <h4>–ü—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–µ –ê–ª–º–∞–∑—ã:</h4>
                ${sector.diamonds.map(diamond => `
                    <div class="diamond-zone">${diamond}</div>
                `).join('')}
            </div>
            <div class="plans">
                <h4>–ü–ª–∞–Ω—ã –£–∫—Ä–µ–ø–ª–µ–Ω–∏—è:</h4>
                ${sector.plans.map(plan => `
                    <div class="plan-item">${plan}</div>
                `).join('')}
            </div>
        `;
    }

    renderJournalHistory() {
        const journalEntries = document.getElementById('journal-entries');
        if (journalEntries && this.data.journalEntries) {
            journalEntries.innerHTML = this.data.journalEntries.map(entry => `
                <div class="journal-entry">
                    <p><strong>${entry.date}:</strong> ${entry.event}</p>
                    <p>–†–µ–∞–∫—Ü–∏—è: ${this.getReactionText(entry.reaction)}</p>
                    <p>–°–µ–º—è: ${entry.seed}</p>
                </div>
            `).join('');
        }
    }

    getReactionText(reaction) {
        const reactions = {
            '1': '–•—Ä—É–ø–∫–æ üòî',
            '2': '–ü—Ä–æ—á–Ω–æ üòê',
            '3': '–ê–Ω—Ç–∏—Ö—Ä—É–ø–∫–æ üí™'
        };
        return reactions[reaction] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    }

    saveJournalEntry() {
        const event = document.getElementById('event').value;
        const reaction = document.querySelector('.reaction-btn.active')?.dataset.value || '2';
        const lesson = document.getElementById('lesson').value;
        const seed = document.getElementById('seed').value;
        const tomorrow = document.getElementById('tomorrow').value;

        if (!event) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–Ω—è');
            return;
        }

        const newEntry = {
            date: new Date().toLocaleDateString('ru-RU'),
            event,
            reaction,
            lesson,
            seed,
            tomorrow
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.data.journalEntries.unshift(newEntry);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.renderJournalHistory();
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('journal-form').reset();
        document.querySelectorAll('.reaction-btn').forEach(btn => btn.classList.remove('active'));
        
        alert('–î–Ω–µ–≤–Ω–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üíé');
    }

    startChapter(chapterId) {
        const chapter = this.data.chapters.find(c => c.id === chapterId);
        if (chapter) {
            alert(`–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —Å: ${chapter.title}`);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–ª–∞–≤—ã
        }
    }

    startMeditation(meditationId) {
        const meditation = this.data.meditations.find(m => m.id === meditationId);
        if (meditation) {
            alert(`–ù–∞—á–∏–Ω–∞–µ–º –º–µ–¥–∏—Ç–∞—Ü–∏—é: ${meditation.title}`);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new DiamondCutterApp();

// –î–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.app = app;
